# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog


import time
import read_csv as rcsv
import serial_RW as srw
from datetime import datetime
# import threading
import signal

# import PyQt5

# import PySide2
# ui_file = PyQt5.QFile("main_window.ui")
# ui_file.open(QFile.ReadOnly)

# loader = QUiLoader()
# window = loader.load(ui_file)
# window.show()

class Ui_MainWindow(object):
    
    duration = 0
    freq_list = []
    power_list = []
    error = "" 
    msg = ""
    status = {"Temperature":"ND","PLL":"ND","Current":"ND","Voltage":"ND","Reflected Power":"ND", 
              "Forward Power":"ND", "PWM":"ND", "On Off":"ND", "Enable foldback":"ND", "Foldback in":"ND", "Error":"No error"}


    # Part to update with the other file
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(620, 597)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.play = QtWidgets.QPushButton(self.centralwidget)
        self.play.setEnabled(False)
        self.play.setGeometry(QtCore.QRect(20, 90, 120, 28))
        self.play.setObjectName("play")
        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setEnabled(False)
        self.stop.setGeometry(QtCore.QRect(180, 90, 120, 28))
        self.stop.setObjectName("stop")
        self.pause = QtWidgets.QPushButton(self.centralwidget)
        self.pause.setEnabled(False)
        self.pause.setGeometry(QtCore.QRect(340, 90, 120, 28))
        self.pause.setObjectName("pause")
        self.outputPlainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.outputPlainTextEdit.setGeometry(QtCore.QRect(20, 140, 531, 101))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.outputPlainTextEdit.setFont(font)
        self.outputPlainTextEdit.setReadOnly(True)
        self.outputPlainTextEdit.setObjectName("outputPlainTextEdit")
        self.GDML = QtWidgets.QLineEdit(self.centralwidget)
        self.GDML.setGeometry(QtCore.QRect(30, 50, 311, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.GDML.setFont(font)
        self.GDML.setReadOnly(True)
        self.GDML.setClearButtonEnabled(False)
        self.GDML.setObjectName("GDML")
        self.Open_CSV = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.Open_CSV.setGeometry(QtCore.QRect(360, 50, 101, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.Open_CSV.setFont(font)
        self.Open_CSV.setStandardButtons(QtWidgets.QDialogButtonBox.Open)
        self.Open_CSV.setCenterButtons(True)
        self.Open_CSV.setObjectName("Open_CSV")
        self.outputLabel = QtWidgets.QLabel(self.centralwidget)
        self.outputLabel.setGeometry(QtCore.QRect(20, 500, 551, 31))
        self.outputLabel.setText("")
        self.outputLabel.setTextFormat(QtCore.Qt.RichText)
        self.outputLabel.setObjectName("outputLabel")
        self.enable_plot = QtWidgets.QCheckBox(self.centralwidget)
        self.enable_plot.setGeometry(QtCore.QRect(120, 20, 20, 20))
        self.enable_plot.setText("")
        self.enable_plot.setChecked(False)
        self.enable_plot.setObjectName("enable_plot")
        self.infoLabel_2 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_2.setGeometry(QtCore.QRect(30, 10, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_2.setFont(font)
        self.infoLabel_2.setObjectName("infoLabel_2")
        self.infoLabel_3 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_3.setGeometry(QtCore.QRect(20, 330, 131, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_3.setFont(font)
        self.infoLabel_3.setObjectName("infoLabel_3")
        self.infoLabel_4 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_4.setGeometry(QtCore.QRect(20, 370, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_4.setFont(font)
        self.infoLabel_4.setObjectName("infoLabel_4")
        self.infoLabel_5 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_5.setGeometry(QtCore.QRect(20, 410, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_5.setFont(font)
        self.infoLabel_5.setObjectName("infoLabel_5")
        self.infoLabel_6 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_6.setGeometry(QtCore.QRect(30, 450, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_6.setFont(font)
        self.infoLabel_6.setObjectName("infoLabel_6")
        self.infoLabel_7 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_7.setGeometry(QtCore.QRect(310, 340, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_7.setFont(font)
        self.infoLabel_7.setObjectName("infoLabel_7")
        self.infoLabel_8 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_8.setGeometry(QtCore.QRect(20, 290, 121, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_8.setFont(font)
        self.infoLabel_8.setObjectName("infoLabel_8")
        self.infoLabel_9 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_9.setGeometry(QtCore.QRect(310, 380, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_9.setFont(font)
        self.infoLabel_9.setObjectName("infoLabel_9")
        self.infoLabel_10 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_10.setGeometry(QtCore.QRect(20, 250, 81, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_10.setFont(font)
        self.infoLabel_10.setObjectName("infoLabel_10")
        self.infoLabel_11 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_11.setGeometry(QtCore.QRect(310, 260, 121, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_11.setFont(font)
        self.infoLabel_11.setObjectName("infoLabel_11")
        self.infoLabel_12 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_12.setGeometry(QtCore.QRect(300, 420, 121, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_12.setFont(font)
        self.infoLabel_12.setObjectName("infoLabel_12")
        self.infoLabel_13 = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel_13.setGeometry(QtCore.QRect(310, 300, 121, 28))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.infoLabel_13.setFont(font)
        self.infoLabel_13.setObjectName("infoLabel_13")
        self.forwardpower_label = QtWidgets.QLabel(self.centralwidget)
        self.forwardpower_label.setGeometry(QtCore.QRect(140, 290, 121, 31))
        self.forwardpower_label.setTextFormat(QtCore.Qt.RichText)
        self.forwardpower_label.setObjectName("forwardpower_label")
        self.reflectedpower_label = QtWidgets.QLabel(self.centralwidget)
        self.reflectedpower_label.setGeometry(QtCore.QRect(140, 330, 121, 31))
        self.reflectedpower_label.setTextFormat(QtCore.Qt.RichText)
        self.reflectedpower_label.setObjectName("reflectedpower_label")
        self.onoff_label = QtWidgets.QLabel(self.centralwidget)
        self.onoff_label.setGeometry(QtCore.QRect(140, 250, 121, 31))
        self.onoff_label.setTextFormat(QtCore.Qt.RichText)
        self.onoff_label.setObjectName("onoff_label")
        self.temperature_label = QtWidgets.QLabel(self.centralwidget)
        self.temperature_label.setGeometry(QtCore.QRect(140, 410, 121, 31))
        self.temperature_label.setTextFormat(QtCore.Qt.RichText)
        self.temperature_label.setObjectName("temperature_label")
        self.voltage_label = QtWidgets.QLabel(self.centralwidget)
        self.voltage_label.setGeometry(QtCore.QRect(140, 370, 121, 31))
        self.voltage_label.setTextFormat(QtCore.Qt.RichText)
        self.voltage_label.setObjectName("voltage_label")
        self.pll_label = QtWidgets.QLabel(self.centralwidget)
        self.pll_label.setGeometry(QtCore.QRect(150, 440, 121, 31))
        self.pll_label.setTextFormat(QtCore.Qt.RichText)
        self.pll_label.setObjectName("pll_label")
        self.foldbackin_label = QtWidgets.QLabel(self.centralwidget)
        self.foldbackin_label.setGeometry(QtCore.QRect(390, 420, 121, 31))
        self.foldbackin_label.setTextFormat(QtCore.Qt.RichText)
        self.foldbackin_label.setObjectName("foldbackin_label")
        self.pwm_label = QtWidgets.QLabel(self.centralwidget)
        self.pwm_label.setGeometry(QtCore.QRect(400, 370, 121, 31))
        self.pwm_label.setTextFormat(QtCore.Qt.RichText)
        self.pwm_label.setObjectName("pwm_label")
        self.current_label = QtWidgets.QLabel(self.centralwidget)
        self.current_label.setGeometry(QtCore.QRect(390, 340, 121, 31))
        self.current_label.setTextFormat(QtCore.Qt.RichText)
        self.current_label.setObjectName("current_label")
        self.erro_label = QtWidgets.QLabel(self.centralwidget)
        self.erro_label.setGeometry(QtCore.QRect(390, 300, 121, 31))
        self.erro_label.setTextFormat(QtCore.Qt.RichText)
        self.erro_label.setObjectName("erro_label")
        self.enablefoldback_label = QtWidgets.QLabel(self.centralwidget)
        self.enablefoldback_label.setGeometry(QtCore.QRect(430, 260, 121, 31))
        self.enablefoldback_label.setTextFormat(QtCore.Qt.RichText)
        self.enablefoldback_label.setObjectName("enablefoldback_label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 620, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # End of part to be updated with the other file
        
                    #Open_DnaExe = self.dialog.findChild(PySide.QtGui.QDialogButtonBox, "Open_DnaExe")
        self.Open_CSV.clicked.connect(lambda: self.open_file("Open_CSV"))
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        # ser = srw.connect_serial("COM11")


        # Read parameters from csv file
        # duration, freq_list, power_list, error = rcsv.read_and_plot("D:\Downloads\Book2.rf.csv", True, False)
        
        self.play.clicked.connect(lambda: self.play_execution())
        
    def save_error_log():
        global status
        global error_history
        to_add = False
    
        if status["Error"] != "No error":
            if len(error_history) != 0:
                if error_history[-1][1] != status["Error"]:
                    print("Add: new value")
                    to_add = True
                elif time.time()-error_history[-1][0] >= 60:
                    print("Add with {} seconds!".format(time.time()-error_history[-1][0]))
                    to_add = True
            else:
                print("Add: first elem")
                to_add = True
    
            if to_add:
                error_history.append([time.time(), status['Error']])
        status["Error"] = "No error"

  
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.play.setText(_translate("MainWindow", "PLAY"))
        self.stop.setText(_translate("MainWindow", "STOP"))
        self.pause.setText(_translate("MainWindow", "PAUSE"))
        self.GDML.setText(_translate("MainWindow", "Select the csv file"))
        self.GDML.setPlaceholderText(_translate("MainWindow", " Select the .gdml file"))
        self.infoLabel_2.setText(_translate("MainWindow", "Plot the csv:"))
        self.infoLabel_3.setText(_translate("MainWindow", "Reflected power:"))
        self.infoLabel_4.setText(_translate("MainWindow", "Voltage:"))
        self.infoLabel_5.setText(_translate("MainWindow", "Temperature:"))
        self.infoLabel_6.setText(_translate("MainWindow", "PLL:"))
        self.infoLabel_7.setText(_translate("MainWindow", "Current: "))
        self.infoLabel_8.setText(_translate("MainWindow", "Forward power:"))
        self.infoLabel_9.setText(_translate("MainWindow", "PWM:"))
        self.infoLabel_10.setText(_translate("MainWindow", "On Off:"))
        self.infoLabel_11.setText(_translate("MainWindow", "Enable foldback:"))
        self.infoLabel_12.setText(_translate("MainWindow", "Foldback in:"))
        self.infoLabel_13.setText(_translate("MainWindow", "Error:"))
        self.forwardpower_label.setText(_translate("MainWindow", "0 W"))
        self.reflectedpower_label.setText(_translate("MainWindow", "0 W"))
        self.onoff_label.setText(_translate("MainWindow", "0"))
        self.temperature_label.setText(_translate("MainWindow", "0 C"))
        self.voltage_label.setText(_translate("MainWindow", "0 V"))
        self.pll_label.setText(_translate("MainWindow", "0"))
        self.foldbackin_label.setText(_translate("MainWindow", "0 W"))
        self.pwm_label.setText(_translate("MainWindow", "0"))
        self.current_label.setText(_translate("MainWindow", "0 A"))
        self.erro_label.setText(_translate("MainWindow", "No error"))
        self.enablefoldback_label.setText(_translate("MainWindow", "0"))

    def open_file(self, button_name):
        # Reads the file path from the prompt
        self.disablePlayButton()
        file_type = button_name.split("_")[1]

        path = ""
        opened_path, _ = QFileDialog.getOpenFileName(None, "Open the {} file".format(file_type), path, "*")
        print("The path selected is: {}".format(opened_path))
        self.GDML.setText(opened_path)
        
        # Read parameters from csv file
        duration, freq_list, power_list, error, msg  = rcsv.read_and_plot(opened_path, self.enable_plot.isChecked(), False)
        # print("The error values is: {}".format(error))
        # print("The return msg is {}".format(msg))
        self.outputLabel.setText(msg)

        if not error:
            self.enablePlayButton()
        
        
    def play_execution(self):
        '''
        ser = srw.connect_serial("COM11")
        
        # Initialize
        index = 0
        next_time = self.duration[0]
        freq = self.freq_list[0]
        power = self.power_list[0]
        
        srw.send_cmd_string(ser,"ON")
        srw.send_cmd_string(ser,"PWR", power)
        # srw.send_cmd_string(ser,"PWM", 300)  # By setting the PWM, the PWR is overwritten!
        srw.send_cmd_string(ser,"FREQ", freq)
        # srw.send_cmd_string(ser,"FLDBCK_ON") # By enabling foldback the power is limited
        # srw.send_cmd_string(ser,"FLDBCK_VAL", 5)
        srw.read_param(ser, self.status, "STATUS")
        
        # Start the main functions
        init_time = time.time()
        exit_flag = False
        # signal.signal(signal.SIGINT, handler)
        # auto_update()
        while time.time()-init_time <= sum(self.duration) and not exit_flag:
            if time.time()-init_time >= next_time:
                index += 1
                if index < len(self.duration):
                    next_time = next_time + self.duration[index]
                    power = self.power_list[index]
                    freq = self.freq_list[index]
                srw.send_cmd_string(ser,"PWR", power)
                srw.send_cmd_string(ser,"FREQ", freq)
                # srw.send_cmd_string(ser,"FLDBCK_ON")
                # srw.send_cmd_string(ser,"FLDBCK_VAL", 5)
        
            self.status = srw.read_param(ser, self.status, "STATUS") # The list can be useful to see the raw data
            self.update_values_on_screen()
            self.status = srw.read_param(ser, self.status, "FLDBCK_READ") # The list can be useful to see the raw data
            self.update_values_on_screen(self)
            self.save_error_log()
            # update_values()
            
        # Soft turn off
        print("\nStart soft shut down...")
        srw.send_cmd_string(ser,"OFF")
        srw.send_cmd_string(ser,"PWM", 0)
        srw.empty_buffer(ser, status, wait=1)
        print("\nRead status to confirm shutdown:")
        srw.read_param(ser, status, "STATUS")
        
        # Close ports
        ser.close()
        '''
        self.update_values_on_screen()

    def update_values_on_screen(self):
        self.pwm_label.setText(self.status["Temperature"])
        self.pll_label.setText(self.status["PLL"])
        self.current_label.setText(self.status["Current"])
        self.voltage_label.setText(self.status["Voltage"])
        self.reflectedpower_label.setText(self.status["Reflected Power"])
        self.forwardpower_label.setText(self.status["Forward Power"])
        self.pwm_label.setText(self.status["PWM"])
        self.onoff_label.setText(self.status["On Off"])
        self.enablefoldback_label.setText(self.status["Enable foldback"])
        self.foldbackin_label.setText(self.status["Foldback in"])
        self.erro_label.setText(self.status["Error"])


    def enablePlayButton(self):
        self.play.setEnabled(True)
        
    def disablePlayButton(self):
        self.play.setEnabled(False)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
